#!/usr/bin/env bpftrace
/*
 * biosnoop.bt   Block I/O tracing tool, showing per I/O latency.
 *               For Linux, uses bpftrace, eBPF.
 *
 *
 * This is a bpftrace version of the bcc tool of the same name.
 *
 * 10-Dec-2023	Costa Shulyupin	Switched to block tracepoints.
 * 15-Nov-2017	Brendan Gregg	Created this.
 * 20-May-2024  Daniel customized 
 * NOTE:  "block_bio_queue" and "block_bio_complete" are available in both 5.X and 6.X kernels, while "request layer" tracepoints "block_io_start"/"block_io_done" are only available in 6.X kernels
 */



BEGIN
{
	printf("%-12s %-7s %-16s %-6s %-16s %-4s %7s\n", "TIME(ms)", "DEVICE", "COMM", "PID", "TYPE","SIZE(kb)","LAT(us)");
}

/*  When a new `bio` is submitted to the block layer (specifically the `bio` layer) by the filesystem. No request enqueued in 
 *  per-device queue yet (that's tracked by the "block_io_start" tracepoint, only available in 6.X kernel)
 *  - format of tracepoint sudo cat /sys/kernel/tracing/events/block/block_bio_queue/format
 */
tracepoint:block:block_bio_queue
{       
        // filter for droplet processes (qemu, ...)
       // if (strncmp(comm, "qemu-system-x86", 10) != 0 && strncmp(comm,"kworker",4) != 0) {
       //    return
        //}
   
        // example: filter for vertain pid
        //if (pid != 2643330) {
        //  return
        //}
      
           
	@start[args->dev, args->sector] = nsecs;
	@iopid[args->dev, args->sector] = pid;
	@iocomm[args->dev, args->sector] = comm;
}

/*
* "block_rq_complete" is a "request layer" tracepoint when the device marks the request as done
* "block_bio_complete" is a "block layer" tracepoint when the filesystem marks the `bio` as done (should happen shortly after "block_rq_complete")
* - not sure why the original author traces both events
* - /@start[..]/ filters events that have no corresponding start-enrty in the bpf map
* format of tracepoint: sudo cat /sys/kernel/tracing/events/block/block_bio_complete/format
*/
tracepoint:block:block_rq_complete,
tracepoint:block:block_bio_complete
/@start[args->dev, args->sector]/
{
	printf("%-12u %4d:%-2d %-16s %-6d %-16s   %llu %7d\n",
		elapsed / 1e6,
		// like MAJOR(dev), MINOR(dev):
		args->dev >> 20, args->dev & 0xfffff,
		@iocomm[args->dev, args->sector],
		@iopid[args->dev, args->sector],
                args->rwbs,
                (args->nr_sector*512)/1e3,
		(nsecs - @start[args->dev, args->sector]) / 1e3);

	delete(@start[args->dev, args->sector]);
	delete(@iopid[args->dev, args->sector]);
	delete(@iocomm[args->dev, args->sector]);
}

END
{
	clear(@start);
	clear(@iopid);
	clear(@iocomm);
}
